@import "shared_variables";


/* Adds a button-hover effect to the element */
@mixin button-hover($background, $border, $color) {
	background: $background;
	border: 1px solid $border;
	color: $color;

	cursor: pointer;

	> * {
		color: $color;
	}
}

/* Adds a border radius to the element */
@mixin border-radius($radius) {

	/* Safari 3-4, iOS 1-3.2, Android 1.6- */
	-webkit-border-radius: $radius;

	/* Firefox 1-3.6 */
	-moz-border-radius: $radius;

	/* Opera 10.5, IE 9, Safari 5, Chrome, Firefox 4, iOS 4, Android 2.1+ */
	border-radius: $radius;

	/* Prevent background color leak outs */
	-webkit-background-clip: padding-box;
	-moz-background-clip:    padding;
	background-clip:         padding-box;
}

/* Adds a margin bottom to the element if it is not the last element. The values can be predefined */
@mixin addMarginBottom($spacing: default) {

	@if $spacing == default {
		margin-bottom: $addMarginBottomElements;
	} @else if $spacing == medium {
		margin-bottom: $mediumMarginBottomElements;
	} @else if $spacing == large {
		margin-bottom: $largeMarginBottomElements;
	} @else {
		margin-bottom: $spacing;
	}

	&:last-child {
		margin-bottom: 0;
	}
}

/* Hides an element but keeps the accessibility */
@mixin hideElementAccessibilty() {
	position: absolute;
	width: 1px;
	height: 1px;
	padding: 0;
	overflow: hidden;
	clip: rect(0, 0, 0, 0);
	white-space: nowrap; /* 1 */
	clip-path: inset(50%);
	border: 0;
}

/* Adds the predefined content padding */
@mixin contentPadding($padding: default) {

	@if $padding == default {
		padding: $defaultContentPadding;
	} @else if $padding == medium {
		padding: $mediumContentPadding;
	} @else if $padding == large {
		padding: $largeContentPadding;
	} @else {
		padding: $padding;
	}
}

/* Centers an element on the screen */
@mixin centerOnScreen() {

	position: absolute;

	top: 50%;
	left: 50%;

	transform: translateX(-50%) translateY(-50%);
	-webkit-transform: translateX(-50%) translateY(-50%);
	-moz-transform: translateX(-50%) translateY(-50%);
	-o-transform: translateX(-50%) translateY(-50%);
}

/* Centers an element horizontally */
@mixin centerHorizontal() {

	position: absolute;

	left: 50%;

	transform: translateX(-50%);
	-webkit-transform: translateX(-50%);
	-moz-transform: translateX(-50%);
	-o-transform: translateX(-50%);
}

/* Centers an element vertically */
@mixin centerVertical() {

	position: absolute;

	top: 50%;

	transform: translateY(-50%);
	-webkit-transform: translateY(-50%);
	-moz-transform: translateY(-50%);
	-o-transform: translateY(-50%);
}
